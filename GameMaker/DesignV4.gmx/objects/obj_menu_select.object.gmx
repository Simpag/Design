<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>option = "";
state = "";
characterChosen = 0;
active = false;
darken = c_gray;
joinedPlayers = 0;
caller = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (state) {
    case "select":
        if ((place_meeting(x, y, obj_player_one_bullet)) || (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any))) {
            cont_menu.state = option;
            with(obj_menu_select) instance_destroy();
            with(obj_player_one_bullet) instance_destroy();
            cont_menu.buttonsExists = false;
        }
    break;
    
//Start Game
    case "startGame":
        if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any) &amp;&amp; global.numberOfPlayers != 0) {
            room_goto_next();
            with(obj_menu_select) instance_destroy();
            with(obj_player_one_bullet) instance_destroy();
            cont_menu.buttonsExists = false;
        }
        
    break;
    
//Back Button
    case "back":
    if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
        cont_menu.state = "Main";
    
        global.numberOfPlayers = 0;
        
        with(obj_menu_select) instance_destroy();
        with(obj_player_one_bullet) instance_destroy();
        cont_menu.buttonsExists = false;
        }
    break;
    
//Part one    
    case "join1":
        if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
            if (cont_menu._display1.joinedPlayers == 0) {
                //Make the character visable
                cont_menu._display1.darken = c_white;
                cont_menu._characterNext1.darken = c_white;
                cont_menu._characterPrevious1.darken = c_white;  
                
                //Activate buttons
                cont_menu._characterNext1.active = true; 
                cont_menu._characterPrevious1.active = true;
                
                //Add one to joined
                cont_menu._display1.joinedPlayers++;
                
                //Add one to the global players
                global.numberOfPlayers++;
                
                //Destroy join button            
                instance_destroy();
            } else {
                _error = instance_create(x, y, cont_popup);
                _error.state = "invalidPlayers";
                _error.caller = 1;
            }
        }
    break;
    
    case "characterNext1":
        if (active) {
            if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
                if (cont_menu._display1.characterChosen &lt; global.numberOfCharacters - 1) {
                    cont_menu._display1.characterChosen++;
                } else {
                    cont_menu._display1.characterChosen = 0;
                }
            }
        }
    break;
    
    case "characterPrevious1":
        if (active) {
            if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
                if (cont_menu._display1.characterChosen &gt; 0) {
                    cont_menu._display1.characterChosen--;
                } else {
                    cont_menu._display1.characterChosen = global.numberOfCharacters - 1;
                }
            }
        }
    break;
    
//Part 2
    case "join2":
        if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
            if (cont_menu._display1.joinedPlayers = 1) {
                //Make the character visable
                cont_menu._display2.darken = c_white;
                cont_menu._characterNext2.darken = c_white;
                cont_menu._characterPrevious2.darken = c_white;  
                
                //Activate buttons
                cont_menu._characterNext2.active = true; 
                cont_menu._characterPrevious2.active = true;
                
                //Add one to joined
                cont_menu._display1.joinedPlayers++;
                
                //Add one to the global players
                global.numberOfPlayers++;
                
                //Destroy join button            
                instance_destroy();
            } else {
                _error = instance_create(x, y, cont_popup);
                _error.state = "invalidPlayers";
                _error.caller = 2;
            }
        }
    break;
    
    case "characterNext2":
        if (active) {
            if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
                if (cont_menu._display2.characterChosen &lt; global.numberOfCharacters - 1) {
                    cont_menu._display2.characterChosen++;
                } else {
                    cont_menu._display2.characterChosen = 0;
                }
            }
        }
    break;
    
    case "characterPrevious2":
        if (active) {
            if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
                if (cont_menu._display2.characterChosen &gt; 0) {
                    cont_menu._display2.characterChosen--;
                } else {
                    cont_menu._display2.characterChosen = global.numberOfCharacters - 1;
                }
            }
        }
    break;
    
//Part 3
    case "join3":
        if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
            if (cont_menu._display1.joinedPlayers = 2) {
                //Make the character visable
                cont_menu._display3.darken = c_white;
                cont_menu._characterNext3.darken = c_white;
                cont_menu._characterPrevious3.darken = c_white;  
                
                //Activate buttons
                cont_menu._characterNext3.active = true; 
                cont_menu._characterPrevious3.active = true;
                
                //Add one to joined
                cont_menu._display1.joinedPlayers++;
                
                //Add one to the global players
                global.numberOfPlayers++;
                
                //Destroy join button            
                instance_destroy();
            } else {
                _error = instance_create(x, y, cont_popup);
                _error.state = "invalidPlayers";
                _error.caller = 3;
            }
        }
    break;
    
    case "characterNext3":
        if (active) {
            if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
                if (cont_menu._display3.characterChosen &lt; global.numberOfCharacters - 1) {
                    cont_menu._display3.characterChosen++;
                } else {
                    cont_menu._display3.characterChosen = 0;
                }
            }
        }
    break;
    
    case "characterPrevious3":
        if (active) {
            if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
                if (cont_menu._display3.characterChosen &gt; 0) {
                    cont_menu._display3.characterChosen--;
                } else {
                    cont_menu._display3.characterChosen = global.numberOfCharacters - 1;
                }
            }
        }
    break;
    
//Part 4
    case "join4":
        if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
            if (cont_menu._display1.joinedPlayers = 3) {
                //Make the character visable
                cont_menu._display4.darken = c_white;
                cont_menu._characterNext4.darken = c_white;
                cont_menu._characterPrevious4.darken = c_white;  
                
                //Activate buttons
                cont_menu._characterNext4.active = true; 
                cont_menu._characterPrevious4.active = true;
                
                //Add one to joined
                cont_menu._display1.joinedPlayers++;
                
                //Add one to the global players
                global.numberOfPlayers++;
                
                //Destroy join button            
                instance_destroy();
            } else {
                _error = instance_create(x, y, cont_popup);
                _error.state = "invalidPlayers";
                _error.caller = 4;
            }
        }
    break;
    
    case "characterNext4":
        if (active) {
            if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
                if (cont_menu._display4.characterChosen &lt; global.numberOfCharacters - 1) {
                    cont_menu._display4.characterChosen++;
                } else {
                    cont_menu._display4.characterChosen = 0;
                }
            }
        }
    break;
    
    case "characterPrevious4":
        if (active) {
            if (position_meeting(mouse_x, mouse_y, self) &amp;&amp; mouse_check_button_pressed(mb_any)) {
                if (cont_menu._display4.characterChosen &gt; 0) {
                    cont_menu._display4.characterChosen--;
                } else {
                    cont_menu._display4.characterChosen = global.numberOfCharacters - 1;
                }
            }
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
switch (state) {
    case "select":
        mask_index = spr_menu_select;
        draw_sprite_ext(spr_menu_select, 0, x, y, 1, 1, 0, c_white, 1);   
    break;

    case "characterDisplay":   
        //Draw character
        draw_sprite_ext(global.characterArray[characterChosen,1], 0, x, y, 1, 1, 0, darken, 1);   
        mask_index = global.characterArray[characterChosen,1];
    break;
    
//Start Game
    case "startGame":
        draw_text(x, y, "Start Game");
        mask_index =  spr_menu_join;
    break;
    
//Back Button
    case "back":
        draw_text(x, y, "Back");
        mask_index =  spr_menu_join;
    break;
    
//Part one    
    case "join1":
        draw_sprite_ext(spr_menu_join, 0, x, y, 1, 1, 0, c_white, 1);
        mask_index =  spr_menu_join;
    break;
    
    case "characterNext1":
        _next = draw_sprite_ext(spr_menu_next, 0, x, y, 1, 1, 0, darken, 1);
        mask_index =  spr_menu_next;    
    break;
    
    case "characterPrevious1":
        _previous = draw_sprite_ext(spr_menu_previous, 0, x, y, 1, 1, 0, darken, 1);  
         mask_index = spr_menu_previous; 
    break;
//Part two    
    case "join2":
        draw_sprite_ext(spr_menu_join, 0, x, y, 1, 1, 0, c_white, 1);
        mask_index =  spr_menu_join;
    break;
    
    case "characterNext2":
        _next = draw_sprite_ext(spr_menu_next, 0, x, y, 1, 1, 0, darken, 1);
        mask_index =  spr_menu_next;    
    break;
    
    case "characterPrevious2":
        _previous = draw_sprite_ext(spr_menu_previous, 0, x, y, 1, 1, 0, darken, 1);  
         mask_index = spr_menu_previous; 
    break;
    
//Part three    
    case "join3":
        draw_sprite_ext(spr_menu_join, 0, x, y, 1, 1, 0, c_white, 1);
        mask_index =  spr_menu_join;
    break;
    
    case "characterNext3":
        _next = draw_sprite_ext(spr_menu_next, 0, x, y, 1, 1, 0, darken, 1);
        mask_index =  spr_menu_next;    
    break;
    
    case "characterPrevious3":
        _previous = draw_sprite_ext(spr_menu_previous, 0, x, y, 1, 1, 0, darken, 1);  
         mask_index = spr_menu_previous; 
    break;
    
//Part four   
    case "join4":
        draw_sprite_ext(spr_menu_join, 0, x, y, 1, 1, 0, c_white, 1);
        mask_index =  spr_menu_join;
    break;
    
    case "characterNext4":
        _next = draw_sprite_ext(spr_menu_next, 0, x, y, 1, 1, 0, darken, 1);
        mask_index =  spr_menu_next;    
    break;
    
    case "characterPrevious4":
        _previous = draw_sprite_ext(spr_menu_previous, 0, x, y, 1, 1, 0, darken, 1);  
         mask_index = spr_menu_previous; 
    break;
}  
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
