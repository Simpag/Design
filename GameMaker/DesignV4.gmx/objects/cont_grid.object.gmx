<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise Variables

//Width and Height in pixels of grid squares used for Steering Behaviours.
//Lower numbers results in a finer grid, but uses more CPU
sb_cell_size = 16; 
//Generate the grid size based on the sb_cell_size fit to fill the entire room
grid_width = (room_width div sb_cell_size)+1;
grid_height = (room_height div sb_cell_size)+1;

//Generate grids
sb_grid_count = ds_grid_create(grid_width, grid_height); //Used to store the number of entities per square
sb_grid_velocity_x = ds_grid_create(grid_width, grid_height); //Stores X velocities
sb_grid_velocity_y = ds_grid_create(grid_width, grid_height); //Stores Y velocities
sb_grid_center_x = ds_grid_create(grid_width, grid_height); //Stores X positions
sb_grid_center_y = ds_grid_create(grid_width, grid_height); //Stores Y positions
sb_grid_ids = ds_grid_create(grid_width, grid_height); //Stores unique IDs of objects

//Make sure grids are empty
ds_grid_clear(sb_grid_count, 0);
ds_grid_clear(sb_grid_velocity_x, 0);
ds_grid_clear(sb_grid_velocity_y, 0);
ds_grid_clear(sb_grid_center_x, 0);
ds_grid_clear(sb_grid_center_y, 0);
ds_grid_clear(sb_grid_ids, 0);

depth = -100; //Probably completely unnecessary now


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up

ds_grid_destroy(sb_grid_count);
ds_grid_destroy(sb_grid_velocity_x);
ds_grid_destroy(sb_grid_velocity_y);
ds_grid_destroy(sb_grid_center_x);
ds_grid_destroy(sb_grid_center_y);
ds_grid_destroy(sb_grid_ids);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ...Reset grids


ds_grid_clear(sb_grid_count, 0);
ds_grid_clear(sb_grid_velocity_x, 0);
ds_grid_clear(sb_grid_velocity_y, 0);
ds_grid_clear(sb_grid_center_x, 0);
ds_grid_clear(sb_grid_center_y, 0);
ds_grid_clear(sb_grid_ids, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make average XY locations

// Scan count grid as nothing necessary for empty cells
for(i=0; i &lt; grid_width; i++) { //Go along the grid
    for(j=0; j &lt; grid_height; j++) { //Go down the grid
        if(sb_grid_count[#i,j] &gt; 0) { //If there is something in the grid
            //Divide Total X and Y values by the number of entities
            //Finds average XY location of all entities in a given cell
            sb_grid_center_x[#i,j] /= sb_grid_count[#i,j];
            sb_grid_center_y[#i,j] /= sb_grid_count[#i,j];
            
                            /*//Draw Grid (duplicated from draw event). Just used for testing
                            draw_set_colour(c_white);
                            draw_set_halign(fa_left);
                            draw_set_valign(fa_top);
                            draw_set_font(-1);
                            for(i=0; i &lt; grid_width; i++) {
                                for(j=0; j &lt; grid_height; j++) {
                                    //if(sb_grid_count[#i,j] &gt; 0) {
                                        draw_text((i*sb_cell_size)+16,(j*sb_cell_size)+16,string(sb_grid_count[#i,j]));
                                    //}
                                }
                            }
                            //End of grid draw testing, can be removed for anything final. */
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
