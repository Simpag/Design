<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Steering Behaviour Support


//Non-Steering behaviour stuff
my_color = c_dkgray;

image_xscale = 3;
image_yscale = image_xscale;


//Steering behaviour stuff
position = vect2(x,y); // will be used to update xy
velocity = vect2(0,0);
steering = vect2(0,0); // desired velocity

max_speed = 4;
max_force = 0.7; // How fast it turns

// Only needed if the object will follow paths
my_path = path_loop;
my_path_point = irandom(path_get_number(my_path)-1); // Choose a random point on the path
my_path_dir = 1; // 1 = forwards, -1 = backwards

// Only needed if object will flock using a grid
//Make sure grid controller is spawned first.
grid_controller = cont_steering; // ID or object that has the steering grid
sb_cell_size = grid_controller.sb_cell_size;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Steering Behaviour Usage

// reset steering (needed before using steering behaviours)
steering = vect2(0,0);


//## Steering Behaviours go below here ##//

// Add like this:
//(First one doesn't need the vect_add, but it doesn't break if you leave it in)
//steering = vect_add(steering, sb_#behaviour#(argument,stuff,blah));

//The last argument for all steering behaviours is the weighting.
//You can use any numerical values you like, but they are proportional.
//ie., two behaviours with weights of "5" and "10" will act the same as
//the same two behaviours with weights of "30" and "60".
//The order of the steering behaviours doesn't matter. (at least it shouldn't)

//steering = vect_add(steering, sb_seek(mouse_x, mouse_y, 1));
steering = vect_add(steering, sb_seek_arrive(mouse_x,mouse_y,256,1));
steering = vect_add(steering, sb_wander(128,160,60,0.1));
//steering = vect_add(steering, sb_flee(mouse_x,mouse_y,1));
//steering = vect_add(steering, sb_pursuit(obj_master_drone,1));
//steering = vect_add(steering, sb_evade(obj_master_drone,1));
//steering = vect_add(steering, sb_path_loop(my_path,30,my_path_dir,1));
steering = vect_add(steering, sb_alignment_grid(4,grid_controller,1));
steering = vect_add(steering, sb_separation_grid2(3,grid_controller,4));
steering = vect_add(steering, sb_cohesion_grid2(5,grid_controller,1));
steering = vect_add(steering, sb_avoid_collision(par_obstacle,80,30,1));

//## Steering Behaviours go above here ##//


//Limit steering by max_force
steering = vect_truncate(steering, max_force); 

// Limit velocity to max_speed
velocity = vect_truncate(vect_add(velocity, steering),max_speed); 

//Add velocity to position
position = vect_add(position, velocity);

//update xy
x = position[1];
y = position[2];

image_angle = vect_direction(velocity);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen Wrap

if position[1] &gt; room_width position[1] = 0;
if position[2] &gt; room_height position[2] = 0;
if position[1] &lt; 0 position[1] = room_width;
if position[2] &lt; 0 position[2] = room_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Report to grids

//Find grid cell it occupies
grid_x = x div sb_cell_size;
grid_y = y div sb_cell_size;

//Pass information to grid controller
with(grid_controller) {
    //Make local variable as these will be used more than once each
    var _grid_x = other.grid_x;
    var _grid_y = other.grid_y;
    sb_grid_count[#_grid_x,_grid_y]+=1; //In the grid, add 1.
    //Adding velocities together gives the desired result,
    //No averaging or extra calculating is needed.
    sb_grid_velocity_x[#_grid_x,_grid_y] += other.velocity[1];
    sb_grid_velocity_y[#_grid_x,_grid_y] += other.velocity[2];
    //Positions get averaged by the grid controller itself,
    //so these can purely be added together.
    sb_grid_center_x[#_grid_x,_grid_y] += other.position[1];
    sb_grid_center_y[#_grid_x,_grid_y] += other.position[2];    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw sprite with colourisation
//If you are not colourising sprites you can delete this draw event entirely.

draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,my_color,image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
